"use strict";(self.webpackChunkio_github_lyrihkaesa=self.webpackChunkio_github_lyrihkaesa||[]).push([["9325"],{27993:function(a,e,n){n.r(e),n.d(e,{default:()=>u,frontMatter:()=>s,metadata:()=>i,assets:()=>o,toc:()=>l,contentTitle:()=>d});var i=JSON.parse('{"id":"laravel-action-patern","title":"Laravel Action Pattern: Arsitektur Ringkas dan Terstruktur untuk Aplikasi Modern","description":"Action Pattern di Laravel adalah pola yang memisahkan setiap aksi tunggal ke dalam satu class terpisah. Pola ini sangat berguna dalam menjaga Single Responsibility Principle dan memudahkan pengujian, perawatan, serta integrasi di berbagai konteks seperti controller, command, hingga Filament Admin.","source":"@site/articles/laravel/31-laravel-action-patern.md","sourceDirName":".","slug":"/laravel-action-patern","permalink":"/laravel/laravel-action-patern","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":31,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Laravel 11 Upgrade Slim Skeleton Strategy","permalink":"/laravel/laravel-11-upgrade-slim-skeleton"},"next":{"title":"Best Partice Laravel","permalink":"/laravel/bestpartice-laravel"}}'),t=n("85893"),r=n("50065");let s={},d="Laravel Action Pattern: Arsitektur Ringkas dan Terstruktur untuk Aplikasi Modern",o={},l=[{value:"\uD83D\uDCE6 Struktur Folder dan File",id:"-struktur-folder-dan-file",level:2},{value:"Contoh Implementasi CRUD",id:"contoh-implementasi-crud",level:2},{value:"Memanggil Action di Controller",id:"memanggil-action-di-controller",level:2},{value:"Praktik Terbaik",id:"praktik-terbaik",level:2},{value:"Passing data <code>Auth User</code> pada Action",id:"passing-data-auth-user-pada-action",level:2},{value:"Validation Rule pada Action",id:"validation-rule-pada-action",level:2},{value:"Policy and Gate Authorization pada Action",id:"policy-and-gate-authorization-pada-action",level:2},{value:"Gunakan Database Transaction pada Action",id:"gunakan-database-transaction-pada-action",level:2},{value:"Gunakan <code>PHPDoc</code> pada paramter <code>array $data</code> untuk type safety di Action",id:"gunakan-phpdoc-pada-paramter-array-data-untuk-type-safety-di-action",level:2},{value:"Intregasi Action Laravel dengan Filament Action (Depedency Injection)",id:"intregasi-action-laravel-dengan-filament-action-depedency-injection",level:2},{value:"<code>CreateModelAction</code> -&gt; <code>CreateRecord</code>",id:"createmodelaction---createrecord",level:3},{value:"<code>UpdateModelAction</code> -&gt; <code>EditRecord</code>",id:"updatemodelaction---editrecord",level:3},{value:"<code>DeleteModelAction</code> -&gt; <code>DeleteAction::make()</code>",id:"deletemodelaction---deleteactionmake",level:3},{value:"<code>CustomModelAction</code> -&gt; <code>Action::make(&#39;custom&#39;)</code>.",id:"custommodelaction---actionmakecustom",level:2},{value:"Apa bedanya Action dengan Services.",id:"apa-bedanya-action-dengan-services",level:2}];function c(a){let e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...a.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"laravel-action-pattern-arsitektur-ringkas-dan-terstruktur-untuk-aplikasi-modern",children:"Laravel Action Pattern: Arsitektur Ringkas dan Terstruktur untuk Aplikasi Modern"})}),"\n",(0,t.jsx)(e.p,{children:"Action Pattern di Laravel adalah pola yang memisahkan setiap aksi tunggal ke dalam satu class terpisah. Pola ini sangat berguna dalam menjaga Single Responsibility Principle dan memudahkan pengujian, perawatan, serta integrasi di berbagai konteks seperti controller, command, hingga Filament Admin."}),"\n",(0,t.jsxs)(e.p,{children:["Pola\xa0",(0,t.jsx)(e.strong,{children:"Action"}),"\xa0adalah konsep untuk memisahkan logika bisnis ke dalam kelas tersendiri yang hanya melakukan satu tugas. Laravel tidak menyediakan perintah Artisan khusus seperti\xa0",(0,t.jsx)(e.code,{children:"make:action"}),", namun kita bisa membuat kelas action secara manual menggunakan\xa0",(0,t.jsx)(e.code,{children:"make:class"}),". Misalnya:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"php artisan make:class Actions/CreatePostAction\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Perintah di atas akan menghasilkan file\xa0",(0,t.jsx)(e.code,{children:"app/Actions/CreatePostAction.php"}),"\xa0dengan namespace\xa0",(0,t.jsx)(e.code,{children:"App\\Actions"}),". Dengan pola ini, setiap operasi aplikasi (misalnya membuat post, menghapus post, dll.) memiliki kelas khususnya sendiri. Laravel Action classes adalah\xa0",(0,t.jsx)(e.em,{children:"mini services"}),"\xa0yang memisahkan setiap aksi satu per satu (prinsip Single Responsibility) dan membuat kode lebih bersih. Pendekatan ini membuat controller dan model tetap ringkas dan terstruktur."]}),"\n",(0,t.jsx)(e.p,{children:"Action biasanya terdiri dari:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"Create"})," -> ",(0,t.jsx)(e.code,{children:"CreatePostAction"})]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"Update"})," -> ",(0,t.jsx)(e.code,{children:"UpdatePostAction"})]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"Delete"})," -> ",(0,t.jsx)(e.code,{children:"DeletePostAction"}),"\r\nCustom Action:"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"Publish"})," -> ",(0,t.jsx)(e.code,{children:"PublishPostAction"})]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"-struktur-folder-dan-file",children:"\uD83D\uDCE6 Struktur Folder dan File"}),"\n",(0,t.jsxs)(e.p,{children:["Atur folder ",(0,t.jsx)(e.code,{children:"app/Actions/"})," berdasarkan domain logika:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tree",children:"app/Actions/\r\n\u251C\u2500\u2500 Authentication/\r\n\u2502   \u2514\u2500\u2500 LoginAction.php\r\n\u251C\u2500\u2500 Posts/\r\n\u2502   \u251C\u2500\u2500 CreatePostAction.php\r\n\u2502   \u251C\u2500\u2500 UpdatePostAction.php\r\n\u2502   \u251C\u2500\u2500 DeletePostAction.php\r\n\u2502   \u251C\u2500\u2500 PublishPostAction.php\r\n\u2502   \u2514\u2500\u2500 ApprovePostAction.php\r\n\u2514\u2500\u2500 Users/\r\n    \u2514\u2500\u2500 UpdateUserProfileAction.php\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Jika ",(0,t.jsx)(e.code,{children:"Action"})," class tidak ",(0,t.jsx)(e.code,{children:"extens"})," class apapun, sebaiknya tambahkan keyword ",(0,t.jsx)(e.code,{children:"final"})," seperti:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"final class CreatePostAction\r\n{\r\n	// ...\r\n	public function handle(array $data): Post\r\n	{\r\n		//\r\n	}\r\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"Nama Method atau Function yang dipanggil pada Action class. Bebas memilih, yang terpenting konsistensi penamaan method/function."}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"handle()"})," Saya merekomendasikan ini, dan @nunomaduro juga merekomendasikan ini."]}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"execute()"})}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"__invoke()"})," ini salah satu  ",(0,t.jsx)(e.a,{href:"https://www.php.net/manual/en/language.oop5.magic.php#object.invoke",children:"magic method/function php"})," metode dipanggil saat skrip mencoba memanggil objek sebagai fungsi."]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"<?php\r\nclass CallableClass\r\n{\r\n    public function __invoke($x)\r\n    {\r\n        var_dump($x);\r\n    }\r\n}\r\n$obj = new CallableClass;\r\n$obj(5); // result: 5\r\nvar_dump(is_callable($obj)); // result: true\r\n?>\r\n\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"contoh-implementasi-crud",children:"Contoh Implementasi CRUD"}),"\n",(0,t.jsxs)(e.p,{children:["Berikut contoh kode kelas action untuk fitur CRUD\xa0",(0,t.jsx)(e.em,{children:"blog post"}),". Kita membuat\xa0",(0,t.jsx)(e.code,{children:"CreatePostAction"}),",\xa0",(0,t.jsx)(e.code,{children:"UpdatePostAction"}),", dan\xa0",(0,t.jsx)(e.code,{children:"DeletePostAction"}),". Masing-masing memiliki satu metode publik (",(0,t.jsx)(e.code,{children:"execute"}),"\xa0atau\xa0",(0,t.jsx)(e.code,{children:"handle"}),") yang melakukan operasi database. Setiap operasi dikemas dalam transaksi database untuk integritas data."]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Create"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"<?php\r\n\r\nnamespace App\\Actions;\r\n\r\nuse App\\Models\\Post;\r\nuse Illuminate\\Support\\Facades\\DB;\r\n\r\nfinal class CreatePostAction\r\n{\r\n    /**\r\n     * Buat post baru di DB.\r\n     *\r\n     * @param  array<string,mixed>  $data\r\n     */\r\n    public function handle(array $data): Post\r\n    {\r\n        return DB::transaction(function () use ($data) {\r\n            return Post::create([\r\n                'title'     => $data['title'],\r\n                'content'   => $data['content'],\r\n                'author_id' => $data['author_id'],\r\n            ]);\r\n        });\r\n    }\r\n}\n"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Update"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"<?php\r\n\r\nnamespace App\\Actions;\r\n\r\nuse App\\Models\\Post;\r\nuse Illuminate\\Support\\Facades\\DB;\r\n\r\nfinal class UpdatePostAction\r\n{\r\n    /**\r\n     * Update data post.\r\n     *\r\n     * @param  Post  $post\r\n     * @param  array<string,mixed>  $data\r\n     */\r\n    public function handle(Post $post, array $data): Post\r\n    {\r\n        return DB::transaction(function () use ($post, $data) {\r\n            $post->update($data);\r\n            return $post;\r\n        });\r\n    }\r\n}\n"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Delete"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"<?php\r\n\r\nnamespace App\\Actions;\r\n\r\nuse App\\Models\\Post;\r\nuse Illuminate\\Support\\Facades\\DB;\r\n\r\nfinal class DeletePostAction\r\n{\r\n    /**\r\n     * Hapus post.\r\n     *\r\n     * @param  Post  $post\r\n     * @return void\r\n     */\r\n    public function handle(Post $post): void\r\n    {\r\n        DB::transaction(function () use ($post) {\r\n            $post->delete();\r\n        });\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"Penjelasan:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Setiap\xa0",(0,t.jsx)(e.code,{children:"Action"}),"\xa0menggunakan namespace\xa0",(0,t.jsx)(e.code,{children:"App\\Actions"}),"\xa0dan disimpan di folder\xa0",(0,t.jsx)(e.code,{children:"app/Actions"}),"\xa0sesuai struktur di atas."]}),"\n",(0,t.jsxs)(e.li,{children:["Metode utama dinamakan ",(0,t.jsx)(e.code,{children:"handle()"})," (bisa juga\xa0",(0,t.jsx)(e.code,{children:"execute()"}),") yang menerima parameter diperlukan. Misalnya\xa0",(0,t.jsx)(e.code,{children:"UpdatePostAction"}),"\xa0menerima objek\xa0",(0,t.jsx)(e.code,{children:"Post"}),"\xa0dan array data."]}),"\n",(0,t.jsxs)(e.li,{children:["Semua operasi database dibungkus\xa0",(0,t.jsx)(e.code,{children:"DB::transaction(...)"}),"\xa0agar jika terjadi kegagalan, perubahan dibatalkan otomatis."]}),"\n",(0,t.jsxs)(e.li,{children:["Hasil operasi (misal instance\xa0",(0,t.jsx)(e.code,{children:"Post"}),") dikembalikan agar controller dapat melanjutkan logika (misal menampilkan atau redirect)."]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"memanggil-action-di-controller",children:"Memanggil Action di Controller"}),"\n",(0,t.jsxs)(e.p,{children:["Pada controller, kita cukup memanggil kelas Action tersebut, misalnya melalui\xa0",(0,t.jsx)(e.em,{children:"dependency injection"}),". Contoh di bawah menggunakan injeksi langsung ke method controller (action kelas akan di-",(0,t.jsx)(e.em,{children:"resolve"}),"\xa0oleh container Laravel)."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"<?php\r\n\r\nnamespace App\\Http\\Controllers;\r\n\r\nuse App\\Http\\Requests\\StorePostRequest;\r\nuse App\\Http\\Requests\\UpdatePostRequest;\r\nuse App\\Actions\\CreatePostAction;\r\nuse App\\Actions\\UpdatePostAction;\r\nuse App\\Actions\\DeletePostAction;\r\nuse App\\Models\\Post;\r\n\r\nclass PostController extends Controller\r\n{\r\n    public function store(StorePostRequest $request, CreatePostAction $action): RedirectResponse\r\n    {\r\n        // Data sudah tervalidasi di StorePostRequest\r\n        $post = $action->handle($request->validated());\r\n        \r\n        return to_route('posts.edit', $post);\r\n    }\r\n\r\n    public function update(UpdatePostRequest $request, Post $post, UpdatePostAction $action)\r\n    {\r\n        $post = $action->handle($post, $request->validated());\r\n        \r\n        return to_route('posts.show', $post);\r\n    }\r\n\r\n    public function destroy(Request $request, Post $post, DeletePostAction $action)\r\n    {\r\n	    $request->user()->can('delete', $post);\r\n	    \r\n        $action->handle($post);\r\n        \r\n        return to_route('posts.index');\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"Penjelasan:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Controller hanya menangani HTTP layer (menerima\xa0",(0,t.jsx)(e.code,{children:"Request"}),", melakukan redirect). Logika simpan/update/hapus didelegasikan ke kelas action."]}),"\n",(0,t.jsxs)(e.li,{children:["Perhatikan\xa0",(0,t.jsx)(e.code,{children:"StorePostRequest"}),"\xa0dan\xa0",(0,t.jsx)(e.code,{children:"UpdatePostRequest"}),"\xa0sudah melakukan validasi. Data bersih hasil validasi (",(0,t.jsx)(e.code,{children:"$request->validated()"}),") langsung diberikan ke action."]}),"\n",(0,t.jsxs)(e.li,{children:["Injeksi\xa0",(0,t.jsx)(e.code,{children:"CreatePostAction $action"}),"\xa0dll. secara otomatis di-",(0,t.jsx)(e.em,{children:"resolve"}),"\xa0oleh Laravel. Cara lain, kita bisa instansiasi manual:\xa0",(0,t.jsx)(e.code,{children:"(new CreatePostAction())->handle(...)"}),". Namun, injeksi memudahkan pengujian dan membaca kode."]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"praktik-terbaik",children:"Praktik Terbaik"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsxs)(e.strong,{children:["Hindari penggunaan facade\xa0",(0,t.jsx)(e.code,{children:"auth()"}),"\xa0di dalam Action:"]}),"\xa0Sebaiknya user atau data kontekstual lain disalurkan melalui parameter atau di-",(0,t.jsx)(e.em,{children:"inject"}),"\xa0lewat konstruktor. Dengan begitu action tidak tergantung pada state global dan lebih mudah diuji."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Validasi di FormRequest:"}),"\xa0Seluruh logika validasi tetap dilakukan di\xa0",(0,t.jsx)(e.em,{children:"FormRequest"}),"\xa0(",(0,t.jsx)(e.code,{children:"StorePostRequest"}),",\xa0",(0,t.jsx)(e.code,{children:"UpdatePostRequest"}),", dll.), bukan di dalam action. Action hanya menerima data yang sudah terverifikasi."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Otorisasi di FormRequest:"}),"\xa0Gunakan metode\xa0",(0,t.jsx)(e.code,{children:"authorize()"}),"\xa0di\xa0",(0,t.jsx)(e.code,{children:"FormRequest"}),"\xa0untuk memeriksa izin akses. Laravel menyediakan mekanisme ini agar otorisasi terpisah dari logika bisnis. Contohnya, kita bisa mengecek apakah user berhak melakukan aksi tertentu sebelum request diproses."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Gunakan transaksi database di dalam Action:"}),"\xa0Seperti contoh di atas, jika operasi action melibatkan banyak perubahan DB, bungkus dengan\xa0",(0,t.jsx)(e.code,{children:"DB::transaction()"}),"\xa0untuk menjaga konsistensi data."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Gunakan PHPDoc untuk hint tipe array:"}),"\xa0Pada method action yang menerima array (misal\xa0",(0,t.jsx)(e.code,{children:"array $data"}),"), sertakan komentar PHPDoc\xa0",(0,t.jsx)(e.code,{children:"@param array<string,mixed> $data"}),"\xa0atau yang sesuai. Ini membantu IDE dan pembaca memahami struktur data yang diharapkan."]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsxs)(e.h2,{id:"passing-data-auth-user-pada-action",children:["Passing data ",(0,t.jsx)(e.code,{children:"Auth User"})," pada Action"]}),"\n",(0,t.jsxs)(e.p,{children:["Jangan gunakan facade ",(0,t.jsx)(e.code,{children:"auth()"})," didalam action, sebaiknya gunakan parameter saja supaya mudah di uji. Contoh:"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\u274C Menggunakan ",(0,t.jsx)(e.code,{children:"auth()"})," facade pada action"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"final class CreatePostAction\r\n{\r\n	public function handle(array $data): Post\r\n	{\r\n		$data['author_id'] = auth()->user()->id;\r\n		\r\n		return Post::create($data);\r\n	}\r\n}\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"final class PostController\r\n{\r\n	public function create(CreatePostRequest $request, CreatePostAction $action): RedirectResponse\r\n	{\r\n		$action->handle($request->validated());\r\n		\r\n		return to_route('posts.index');\r\n	}\r\n}\n"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u2705 Passing user login dengan parameter"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"final class CreatePostAction\r\n{\r\n	public function handle(User $user, array $data): Post\r\n	{\r\n		$data['author_id'] = $user->id;\r\n		\r\n		return Post::create($data);\r\n	}\r\n}\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"final class PostController\r\n{\r\n	public function create(CreatePostRequest $request, CreatePostAction $action): RedirectResponse\r\n	{\r\n		$action->handle($request->user(), $request->validated());\r\n		\r\n		return to_route('posts.index');\r\n	}\r\n}\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"validation-rule-pada-action",children:"Validation Rule pada Action"}),"\n",(0,t.jsxs)(e.p,{children:["Didalam action jangan ada ",(0,t.jsx)(e.code,{children:"validation rule"}),", sebaiknya anda gunakan ",(0,t.jsx)(e.code,{children:"validation rule"})," pada ",(0,t.jsx)(e.code,{children:"FormRequest"})," seperti ",(0,t.jsx)(e.code,{children:"CreatePostRequest"}),". Tujuannya agar action dapat dipakai dimana saja tanpa validation rule misalnya di console command, dimana yang pakai command biasanya developer itu sendiri. dan ",(0,t.jsx)(e.code,{children:"validation rule"})," biasanya ada di ",(0,t.jsx)(e.code,{children:"Controller"})," untuk ",(0,t.jsx)(e.code,{children:"web"})," dan ",(0,t.jsx)(e.code,{children:"api"}),"."]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"policy-and-gate-authorization-pada-action",children:"Policy and Gate Authorization pada Action"}),"\n",(0,t.jsxs)(e.p,{children:["Didalam action jangan ada policy atau gate, karena action itu sendiri bisa dijalankan sendiri tanpa pengecekan policy / gate, untuk meletakkan gate itu tugasnya ",(0,t.jsx)(e.code,{children:"FormRequest"})," yang nantinya dipakai oleh ",(0,t.jsx)(e.code,{children:"Controller"})," untuk ",(0,t.jsx)(e.code,{children:"web"})," ataupun ",(0,t.jsx)(e.code,{children:"api"}),". Jadi saat menjalankan action pada command itu tidak ada halangan dari gate."]}),"\n",(0,t.jsxs)(e.p,{children:["Sebaiknya gunakan policy/gate pada fungsi ",(0,t.jsx)(e.code,{children:"authorize()"})," pada ",(0,t.jsx)(e.code,{children:"FormRequest"})," , alasannya agar fungsi ",(0,t.jsx)(e.code,{children:"rule()"})," pada ",(0,t.jsx)(e.code,{children:"FormRequest"})," tidak dijalankan jika policy/gatenya tidak valid. Jadi hemat resource, jadi jika sudah menggunakan FormRequest sebaiknya taruh policy/gate di method ",(0,t.jsx)(e.code,{children:"authorize()"})," daripada anda validasi di controller lalu memanggil FormRequest -> $request->validated()."]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"gunakan-database-transaction-pada-action",children:"Gunakan Database Transaction pada Action"}),"\n",(0,t.jsx)(e.p,{children:"Pada action kalau bisa gunakan database transaction supaya saat action tersebut dipanggil di action lain jika salah satu gagal maka bisa di rollback."}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsxs)(e.h2,{id:"gunakan-phpdoc-pada-paramter-array-data-untuk-type-safety-di-action",children:["Gunakan ",(0,t.jsx)(e.code,{children:"PHPDoc"})," pada paramter ",(0,t.jsx)(e.code,{children:"array $data"})," untuk type safety di Action"]}),"\n",(0,t.jsxs)(e.p,{children:["Jika anda tidak menggunakan pattern DTO atau Data Transfer Object  sebaiknya anda manfaatkan ",(0,t.jsx)(e.code,{children:"PHPDoc"})," untuk membuat ",(0,t.jsx)(e.code,{children:"larastan"})," atau ",(0,t.jsx)(e.code,{children:"phpstan"})," tidak komplain dan membantu autosugestion IDE anda, biasnaya action saya ada paramter ",(0,t.jsx)(e.code,{children:"array $data"}),", nah anda bisa mendefinisikan apa isi dari ",(0,t.jsx)(e.code,{children:"array $data"}),"  tersebut dengan ",(0,t.jsx)(e.code,{children:"PHPDoc"}),"."]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"intregasi-action-laravel-dengan-filament-action-depedency-injection",children:"Intregasi Action Laravel dengan Filament Action (Depedency Injection)"}),"\n",(0,t.jsx)(e.p,{children:"Karena action yang dibuat tidak tergantung dengan policy / gate, validation rule, maka anda bisa memanfaatkan Action Laravel yang anda buat didalam Filament Resource ataupun Action.\r\nAnda bisa overwrite method Pada Filament Resource dan Action seperti controller."}),"\n",(0,t.jsx)(e.p,{children:"Disini saya akan membahas apa saja method yang perlu di overwrite atau di inject dengan Action Laravel yang anda buat. Jadi ini membahas Dependency Injection Action Laravel ke Filament Action."}),"\n",(0,t.jsxs)(e.p,{children:["Jika menggunakan\xa0Filament Admin, pola action dapat diintegrasikan di halaman resource. Misalnya pada halaman\xa0",(0,t.jsx)(e.strong,{children:"CreateRecord"}),"\xa0dan\xa0",(0,t.jsx)(e.strong,{children:"EditRecord"}),"\xa0di Filament: secara default Filament melakukan operasi\xa0",(0,t.jsx)(e.em,{children:"create/update"}),"\xa0model secara langsung. Kita dapat menyesuaikannya dengan mengganti proses penyimpanan menggunakan metode\xa0",(0,t.jsx)(e.code,{children:"handleRecordCreation()"}),"\xa0atau\xa0",(0,t.jsx)(e.code,{children:"handleRecordUpdate()"}),"."]}),"\n",(0,t.jsxs)(e.h3,{id:"createmodelaction---createrecord",children:[(0,t.jsx)(e.code,{children:"CreateModelAction"})," -> ",(0,t.jsx)(e.code,{children:"CreateRecord"})]}),"\n",(0,t.jsxs)(e.p,{children:["Anda bisa memodifikasi pada page yang extends ",(0,t.jsx)(e.code,{children:"CreateRecord"})," , misal ",(0,t.jsx)(e.code,{children:"CreatePost"})," atau jika anda ingin menggunakan modal, anda harus overwrite pada ",(0,t.jsx)(e.code,{children:"CreateAction"})," filament menggunakan method ",(0,t.jsx)(e.code,{children:"->using()"}),"."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"use Filament\\Resources\\Pages\\CreateRecord;\r\n\r\nclass CreatePost extends CreateRecord\r\n{\r\n    protected function handleRecordCreation(array $data, CreatePostAction $action): Post\r\n    {\r\n        // Panggil CreatePostAction alih-alih create langsung\r\n        return $action->handle($data);\r\n    }\r\n}\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"updatemodelaction---editrecord",children:[(0,t.jsx)(e.code,{children:"UpdateModelAction"})," -> ",(0,t.jsx)(e.code,{children:"EditRecord"})]}),"\n",(0,t.jsxs)(e.p,{children:["Anda bisa memodifikasi pada page yang extends ",(0,t.jsx)(e.code,{children:"EditRecord"})," , misal ",(0,t.jsx)(e.code,{children:"EditPost"})," atau jika anda ingin menggunakan modal, anda harus overwrite pada ",(0,t.jsx)(e.code,{children:"CreateAction"})," filament menggunakan method ",(0,t.jsx)(e.code,{children:"->using()"}),"."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"use Filament\\Resources\\Pages\\EditRecord;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\nuse Filament\\Notifications\\Notification;\r\n\r\nclass EditPost extends EditRecord\r\n{\r\n    protected function handleRecordUpdate(Model $record, array $data, UpdatePostAction $action): Model\r\n    {\r\n        // Panggil UpdatePostAction\r\n        return $action->handle($record, $data);\r\n    }\r\n\r\n    protected function getActions(): array\r\n    {\r\n        return [\r\n            // Tombol aksi kustom, misal \"Publish\"\r\n            \\Filament\\Pages\\Actions\\Action::make('publish')->action('publish'),\r\n            \\Filament\\Pages\\Actions\\DeleteAction::make(),\r\n        ];\r\n    }\r\n\r\n    // Method yang dijalankan ketika tombol Publish diklik\r\n    public function publish(Model $record, PublishPostAction $action): void\r\n    {\r\n        $action->handle($record);\r\n        \r\n        Notification::make()\r\n            ->success()\r\n            ->body('Post berhasil dipublish.')\r\n            ->send();\r\n    }\r\n}\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"deletemodelaction---deleteactionmake",children:[(0,t.jsx)(e.code,{children:"DeleteModelAction"})," -> ",(0,t.jsx)(e.code,{children:"DeleteAction::make()"})]}),"\n",(0,t.jsxs)(e.p,{children:["Karena Delete itu tidak ada Page Filament alias hanya menggunakan Action Filament biasa yang muncul confirmation popup anda bisa melakukan inject action menggunakan method ",(0,t.jsx)(e.code,{children:"->using()"}),"."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"namespace App\\Filament\\Resources;\r\n\r\nuse Filament\\Resources\\Resource;\r\nuse Filament\\Tables;\r\nuse Filament\\Tables\\Actions\\DeleteAction;\r\nuse App\\Actions\\DeletePostAction;\r\nuse App\\Models\\Post;\r\n\r\nclass PostResource extends Resource\r\n{\r\n    protected static string $model = Post::class;\r\n\r\n    public static function table(Table $table): Table\r\n    {\r\n        return $table\r\n            ->columns([\r\n                // ... kolom-kolom tabel ...\r\n            ])\r\n            ->actions([\r\n                Tables\\Actions\\EditAction::make(),\r\n                Tables\\Actions\\DeleteAction::make()\r\n                    ->using(fn (Post $record, DeletePostAction $action) => $action->handle($record)),\r\n            ])\r\n            ->bulkActions([\r\n                Tables\\Actions\\DeleteBulkAction::make(),\r\n            ]);\r\n    }\r\n\r\n    // ...\r\n}\n"})}),"\n",(0,t.jsxs)(e.h2,{id:"custommodelaction---actionmakecustom",children:[(0,t.jsx)(e.code,{children:"CustomModelAction"})," -> ",(0,t.jsx)(e.code,{children:"Action::make('custom')"}),"."]}),"\n",(0,t.jsxs)(e.p,{children:["Jika anda ada membuat custom action pada filament misal publish post: ",(0,t.jsx)(e.code,{children:"Action::make('publish')"})," maka anda bisa inject lewat method ",(0,t.jsx)(e.code,{children:"->action()"}),", karena ini custom anda harus menambahkan policy/gate sendiri, menambahkan form jika diperlukan, didalam form terdapat field filament yang sudah ada validation rule."]}),"\n",(0,t.jsx)(e.p,{children:"Penjelasan:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Filament menyediakan hook\xa0",(0,t.jsx)(e.code,{children:"handleRecordCreation()"}),"\xa0dan\xa0",(0,t.jsx)(e.code,{children:"handleRecordUpdate()"}),"\xa0untuk mengubah bagaimana data disimpan. Dengan menggunakannya, kita dapat memanggil kelas Action kita."]}),"\n",(0,t.jsxs)(e.li,{children:["Untuk\xa0",(0,t.jsx)(e.strong,{children:"Delete"}),", Filament memiliki prebuilt\xa0",(0,t.jsx)(e.code,{children:"DeleteAction"}),". Kita bisa memanfaatkan metode\xa0",(0,t.jsx)(e.code,{children:"before()"}),"\xa0dan\xa0",(0,t.jsx)(e.code,{children:"after()"}),"\xa0pada\xa0",(0,t.jsx)(e.code,{children:"DeleteAction"}),"\xa0untuk menjalankan logika tambahan (misal mencatat log)."]}),"\n",(0,t.jsxs)(e.li,{children:["Tombol aksi kustom (misal\xa0",(0,t.jsx)(e.em,{children:"Publish"}),") dibuat dengan\xa0",(0,t.jsx)(e.code,{children:"Action::make(...)"}),". Sebagaimana contoh Filament, kita menambahkan\xa0",(0,t.jsx)(e.code,{children:"Action::make('impersonate')"}),"\xa0atau\xa0",(0,t.jsx)(e.code,{children:"->action('impersonate')"}),"\xa0di method\xa0",(0,t.jsx)(e.code,{children:"getActions()"}),". Pada contoh di atas, tombol\xa0",(0,t.jsx)(e.em,{children:"Publish"}),"\xa0memanggil method\xa0",(0,t.jsx)(e.code,{children:"publish()"}),"\xa0yang selanjutnya memanggil\xa0",(0,t.jsx)(e.code,{children:"PublishPostAction"}),"."]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"apa-bedanya-action-dengan-services",children:"Apa bedanya Action dengan Services."}),"\n",(0,t.jsxs)(e.p,{children:["Perbedaan utama antara\xa0",(0,t.jsx)(e.strong,{children:"Action"}),"\xa0dan\xa0",(0,t.jsx)(e.strong,{children:"Service"}),"\xa0adalah pada cakupan tanggung jawab. Pada service class biasanya kita mengelompokkan metode terkait model atau fungsionalitas tertentu menjadi satu kelas (misalnya\xa0",(0,t.jsx)(e.code,{children:"UserService"}),"\xa0dengan beberapa metode). Sedangkan Action memisahkan setiap operasi menjadi satu kelas tersendiri dengan satu metode publik saja. Ringkasnya:"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Service class:"}),"\xa0satu kelas, banyak metode (misal\xa0",(0,t.jsx)(e.code,{children:"UserService"}),"\xa0punya\xa0",(0,t.jsx)(e.code,{children:"create"}),",\xa0",(0,t.jsx)(e.code,{children:"update"}),",\xa0",(0,t.jsx)(e.code,{children:"delete"}),")."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Action class:"}),"\xa0satu metode per kelas (misal\xa0",(0,t.jsx)(e.code,{children:"CreateUserAction"}),",\xa0",(0,t.jsx)(e.code,{children:"UpdateUserAction"}),", dll.)."]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["Model lama sering menampung banyak logika (misalnya metode\xa0",(0,t.jsx)(e.code,{children:"publish()"}),"\xa0pada model), namun jika ada banyak aksi berbeda (arsip, duplikasi, publish, dll.) model akan menjadi besar. Dengan Action, setiap logika dipindahkan ke kelas dedicated, membuat model dan controller lebih bersih."]}),"\n",(0,t.jsxs)(e.p,{children:["Bedanya itu action class hanya menjalankan satu method atau fungsi saja, sedangkan service class itu ada beberapa fungsi atau method seperti controller, saya biasanya gunakan service untuk mengumpulkan logika dari API pihak ketiga misal Google Client, mungkin saya buatkan ",(0,t.jsx)(e.code,{children:"GoogleService"}),", ",(0,t.jsx)(e.code,{children:"GoogleCalendarService"}),", ",(0,t.jsx)(e.code,{children:"WhatsAppBotService"}),", dsb. Jadi untuk API pihak ketiga saya kumpulkan logika bisnisnya dengan service."]}),"\n",(0,t.jsx)(e.p,{children:"Jadi Action yang saya buat dapat melakukan CRUD dari database lewat eloquent model laravel, dan CRUD dari sumber API pihak ketiga lewat Service class."})]})}function u(a={}){let{wrapper:e}={...(0,r.a)(),...a.components};return e?(0,t.jsx)(e,{...a,children:(0,t.jsx)(c,{...a})}):c(a)}},50065:function(a,e,n){n.d(e,{Z:function(){return d},a:function(){return s}});var i=n(67294);let t={},r=i.createContext(t);function s(a){let e=i.useContext(r);return i.useMemo(function(){return"function"==typeof a?a(e):{...e,...a}},[e,a])}function d(a){let e;return e=a.disableParentContext?"function"==typeof a.components?a.components(t):a.components||t:s(a.components),i.createElement(r.Provider,{value:e},a.children)}}}]);