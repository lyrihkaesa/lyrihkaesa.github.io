"use strict";(self.webpackChunkio_github_lyrihkaesa=self.webpackChunkio_github_lyrihkaesa||[]).push([["3194"],{56949:function(e,n,r){r.r(n),r.d(n,{default:()=>c,frontMatter:()=>s,metadata:()=>i,assets:()=>d,toc:()=>o,contentTitle:()=>l});var i=JSON.parse('{"id":"flutter-starter-kit/form","title":"\uD83D\uDCDD Dokumentasi Form & Validation \u2013 Flutter Starter Kit","description":"\uD83D\uDCE6 Package yang Digunakan","source":"@site/articles/flutter/01-flutter-starter-kit/93-form.md","sourceDirName":"01-flutter-starter-kit","slug":"/flutter-starter-kit/form","permalink":"/flutter/flutter-starter-kit/form","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":93,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\uD83D\uDCD8 API Design Guide untuk Flutter Starter Kit","permalink":"/flutter/flutter-starter-kit/api-design"},"next":{"title":"List Task","permalink":"/flutter/flutter-starter-kit/dev-big-note"}}'),a=r("85893"),t=r("50065");let s={},l="\uD83D\uDCDD Dokumentasi Form & Validation \u2013 Flutter Starter Kit",d={},o=[{value:"\uD83D\uDCE6 Package yang Digunakan",id:"-package-yang-digunakan",level:2},{value:"\uD83D\uDCCB Validation Input: Client vs Server",id:"-validation-input-client-vs-server",level:2},{value:"\u2705 Client-side validation",id:"-client-side-validation",level:3},{value:"\uD83C\uDF10 Server-side validation",id:"-server-side-validation",level:3},{value:"\uD83C\uDF9B\uFE0F Form Validation Mode di Flutter",id:"\uFE0F-form-validation-mode-di-flutter",level:2},{value:"\uD83C\uDFD7\uFE0F Flow Arsitektur",id:"\uFE0F-flow-arsitektur",level:2},{value:"\uD83D\uDD27 UseCase (Register)",id:"-usecase-register",level:2},{value:"\uD83C\uDF9B\uFE0F Bloc",id:"\uFE0F-bloc",level:2},{value:"\uD83D\uDDBC\uFE0F UI (Register Page)",id:"\uFE0F-ui-register-page",level:2},{value:"\uD83D\uDCCC Ringkasan Best Practice",id:"-ringkasan-best-practice",level:2}];function u(e){let n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"-dokumentasi-form--validation--flutter-starter-kit",children:"\uD83D\uDCDD Dokumentasi Form & Validation \u2013 Flutter Starter Kit"})}),"\n",(0,a.jsx)(n.h2,{id:"-package-yang-digunakan",children:"\uD83D\uDCE6 Package yang Digunakan"}),"\n",(0,a.jsx)(n.p,{children:"Untuk membangun form yang konsisten, kita pakai beberapa package utama:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://pub.dev/packages/flutter_form_builder",children:(0,a.jsx)(n.code,{children:"flutter_form_builder"})}),(0,a.jsx)(n.br,{}),"\n","\u2192 Memberikan abstraction lebih baik untuk form, validator built-in, ",(0,a.jsx)(n.code,{children:"FormBuilderState"}),", dan integrasi mudah untuk error handling."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://pub.dev/packages/form_builder_validators",children:(0,a.jsx)(n.code,{children:"form_builder_validators"})}),(0,a.jsx)(n.br,{}),"\n","\u2192 Kumpulan validator siap pakai (required, email, minLength, dsb)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://pub.dev/packages/flutter_bloc",children:(0,a.jsx)(n.code,{children:"flutter_bloc"})}),(0,a.jsx)(n.br,{}),"\n","\u2192 Untuk state management dan event-driven form submission."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://pub.dev/packages/freezed",children:(0,a.jsx)(n.code,{children:"freezed"})}),(0,a.jsx)(n.br,{}),"\n","\u2192 Untuk membuat ",(0,a.jsx)(n.code,{children:"sealed class"})," state/event yang clean."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://pub.dev/packages/injectable",children:(0,a.jsx)(n.code,{children:"injectable"})})," + ",(0,a.jsx)(n.a,{href:"https://pub.dev/packages/get_it",children:(0,a.jsx)(n.code,{children:"get_it"})}),(0,a.jsx)(n.br,{}),"\n","\u2192 Untuk dependency injection, supaya tiap layer tidak saling ketergantungan secara langsung."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"-validation-input-client-vs-server",children:"\uD83D\uDCCB Validation Input: Client vs Server"}),"\n",(0,a.jsx)(n.h3,{id:"-client-side-validation",children:"\u2705 Client-side validation"}),"\n",(0,a.jsxs)(n.p,{children:["Dilakukan langsung di UI sebelum request dikirim ke server.",(0,a.jsx)(n.br,{}),"\n","Contoh rules umum:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Name"}),": required, minLength(3)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Email"}),": required, format email valid"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Password"}),": required, minLength(8), harus ada angka/huruf besar"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Tujuan: mengurangi request ke server untuk input yang jelas-jelas salah."}),"\n",(0,a.jsx)(n.h3,{id:"-server-side-validation",children:"\uD83C\uDF10 Server-side validation"}),"\n",(0,a.jsxs)(n.p,{children:["Dilakukan setelah request dikirim ke API.",(0,a.jsx)(n.br,{}),"\n","Server bisa mengembalikan error per-field atau global error.",(0,a.jsx)(n.br,{}),"\n","Contoh (response JSON Laravel/Express/NestJS):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "message": "The given data was invalid.",\n  "errors": {\n    "email": ["The email has already been taken."],\n    "password": ["Password must contain at least one symbol."]\n  }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["\uD83D\uDCCC ",(0,a.jsx)(n.strong,{children:"Best practice:"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Client tetap validasi, meski server juga validasi (defense in depth)."}),"\n",(0,a.jsxs)(n.li,{children:["UI harus siap menerima ",(0,a.jsx)(n.strong,{children:"per-field errors dari server"}),", lalu ditampilkan langsung di form."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"\uFE0F-form-validation-mode-di-flutter",children:"\uD83C\uDF9B\uFE0F Form Validation Mode di Flutter"}),"\n",(0,a.jsxs)(n.p,{children:["Flutter (dan ",(0,a.jsx)(n.code,{children:"FormBuilder"}),") menyediakan ",(0,a.jsx)(n.strong,{children:"tiga mode utama"})," untuk menampilkan error:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"AutovalidateMode.disabled"}),(0,a.jsx)(n.br,{}),"\n","\u2192 Error hanya muncul setelah ",(0,a.jsx)(n.code,{children:"formKey.currentState!.validate()"})," dipanggil (biasanya saat submit)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"AutovalidateMode.onUserInteraction"}),(0,a.jsx)(n.br,{}),"\n","\u2192 Error baru muncul setelah user menyentuh field minimal sekali, lalu keluar dari field."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"AutovalidateMode.always"}),(0,a.jsx)(n.br,{}),"\n","\u2192 Error ditampilkan secara realtime setiap kali user mengetik (cocok untuk UX interaktif, tapi kadang terasa \u201Cjudgy\u201D kalau dipakai untuk semua field)."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["\uD83D\uDCCC ",(0,a.jsx)(n.strong,{children:"Rekomendasi Starter Kit:"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Gunakan ",(0,a.jsx)(n.code,{children:"onUserInteraction"})," untuk form register/login (balance UX)."]}),"\n",(0,a.jsxs)(n.li,{children:["Gunakan ",(0,a.jsx)(n.code,{children:"always"})," untuk field sensitif (misalnya password strength meter)."]}),"\n",(0,a.jsxs)(n.li,{children:["Gunakan ",(0,a.jsx)(n.code,{children:"disabled"})," hanya kalau kamu ingin error muncul sekali saja saat submit."]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"\uFE0F-flow-arsitektur",children:"\uD83C\uDFD7\uFE0F Flow Arsitektur"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"UI (RegisterPage, FormBuilder)\n   \u2193 Bloc (RegisterBloc)\n      \u2193 UseCase (Register)\n         \u2193 Repository (AuthRepository)\n            \u2193 RemoteDataSource (AuthRemoteDataSource)\n            \u2193 LocalDataSource (AuthLocalDataSource)\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"-usecase-register",children:"\uD83D\uDD27 UseCase (Register)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"@Injectable()\nclass Register {\n  final AuthRepository repository;\n\n  Register(this.repository);\n\n  Future<Either<Failure, UserEntity>> call({\n    required String name,\n    required String email,\n    required String password,\n  }) {\n    return repository.register(\n      name: name,\n      email: email,\n      password: password,\n    );\n  }\n}\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"\uFE0F-bloc",children:"\uD83C\uDF9B\uFE0F Bloc"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"sealed class RegisterEvent {}\nclass RegisterSubmitted extends RegisterEvent {\n  final String name;\n  final String email;\n  final String password;\n  RegisterSubmitted(this.name, this.email, this.password);\n}\n\n@freezed\nclass RegisterState with _$RegisterState {\n  const factory RegisterState.initial() = _Initial;\n  const factory RegisterState.loading() = _Loading;\n  const factory RegisterState.success(UserEntity user) = _Success;\n  const factory RegisterState.failure(Failure failure) = _Failure;\n}\n\n@Injectable()\nclass RegisterBloc extends Bloc<RegisterEvent, RegisterState> {\n  final Register register;\n\n  RegisterBloc(this.register) : super(const RegisterState.initial()) {\n    on<RegisterSubmitted>(_onSubmitted);\n  }\n\n  Future<void> _onSubmitted(\n    RegisterSubmitted event,\n    Emitter<RegisterState> emit,\n  ) async {\n    emit(const RegisterState.loading());\n\n    final result = await register(\n      name: event.name,\n      email: event.email,\n      password: event.password,\n    );\n\n    result.fold(\n      (failure) => emit(RegisterState.failure(failure)),\n      (user) => emit(RegisterState.success(user)),\n    );\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"\uFE0F-ui-register-page",children:"\uD83D\uDDBC\uFE0F UI (Register Page)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'class RegisterPage extends StatelessWidget {\n  RegisterPage({super.key});\n\n  final _formKey = GlobalKey<FormBuilderState>();\n\n  @override\n  Widget build(BuildContext context) {\n    return BlocProvider(\n      create: (_) => getIt<RegisterBloc>(),\n      child: Scaffold(\n        appBar: AppBar(title: const Text("Register")),\n        body: BlocConsumer<RegisterBloc, RegisterState>(\n          listener: (context, state) {\n            state.whenOrNull(\n              success: (user) {\n                ScaffoldMessenger.of(context).showSnackBar(\n                  const SnackBar(content: Text("Register success!")),\n                );\n              },\n              failure: (failure) {\n                if (failure is ValidationFailure) {\n                  // Error per-field dari server\n                  final errors = failure.errors;\n                  errors.forEach((field, messages) {\n                    _formKey.currentState?.invalidateField(\n                      name: field,\n                      errorText: messages.join(", "),\n                    );\n                  });\n                } else {\n                  // Error global\n                  ScaffoldMessenger.of(context).showSnackBar(\n                    SnackBar(content: Text(failure.toString())),\n                  );\n                }\n              },\n            );\n          },\n          builder: (context, state) {\n            final bloc = context.read<RegisterBloc>();\n            return Padding(\n              padding: const EdgeInsets.all(16),\n              child: FormBuilder(\n                key: _formKey,\n                autovalidateMode: AutovalidateMode.onUserInteraction,\n                child: Column(\n                  children: [\n                    FormBuilderTextField(\n                      name: "name",\n                      decoration: const InputDecoration(labelText: "Name"),\n                      validator: FormBuilderValidators.compose([\n                        FormBuilderValidators.required(),\n                        FormBuilderValidators.minLength(3),\n                      ]),\n                    ),\n                    FormBuilderTextField(\n                      name: "email",\n                      decoration: const InputDecoration(labelText: "Email"),\n                      validator: FormBuilderValidators.compose([\n                        FormBuilderValidators.required(),\n                        FormBuilderValidators.email(),\n                      ]),\n                    ),\n                    FormBuilderTextField(\n                      name: "password",\n                      decoration: const InputDecoration(labelText: "Password"),\n                      obscureText: true,\n                      validator: FormBuilderValidators.compose([\n                        FormBuilderValidators.required(),\n                        FormBuilderValidators.minLength(8),\n                      ]),\n                    ),\n                    const SizedBox(height: 16),\n                    ElevatedButton(\n                      onPressed: state is _Loading\n                          ? null\n                          : () {\n                              if (_formKey.currentState?.saveAndValidate() ??\n                                  false) {\n                                final values = _formKey.currentState!.value;\n                                bloc.add(RegisterSubmitted(\n                                  values[\'name\'],\n                                  values[\'email\'],\n                                  values[\'password\'],\n                                ));\n                              }\n                            },\n                      child: state is _Loading\n                          ? const CircularProgressIndicator()\n                          : const Text("Register"),\n                    ),\n                  ],\n                ),\n              ),\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"-ringkasan-best-practice",children:"\uD83D\uDCCC Ringkasan Best Practice"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Selalu pakai client-side validation"})," (UX lebih baik)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Selalu tangani server-side validation"})," (supaya UI tidak crash kalau ada error spesifik server)."]}),"\n",(0,a.jsxs)(n.li,{children:["Gunakan ",(0,a.jsx)(n.code,{children:"AutovalidateMode.onUserInteraction"})," sebagai default."]}),"\n",(0,a.jsxs)(n.li,{children:["Tangani error per-field server dengan ",(0,a.jsx)(n.code,{children:"invalidateField"}),"."]}),"\n",(0,a.jsx)(n.li,{children:"Simpan logika validasi berat di server (misalnya email sudah terdaftar, password strength rules)."}),"\n"]})]})}function c(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},50065:function(e,n,r){r.d(n,{Z:function(){return l},a:function(){return s}});var i=r(67294);let a={},t=i.createContext(a);function s(e){let n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);